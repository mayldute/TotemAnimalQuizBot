import telebot
from config import TOKEN, ADMIN_ID, QUESTIONS, RESULTS
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import threading
import time
from extensions import handle_redis_connection_error, handle_image_caching_error, handle_user_data_error, handle_general_error

bot = telebot.TeleBot(TOKEN)

user_data = {}

USER_DATA_LIFETIME = 86400  

def clear_inactive_users():
    """Function to clear data of inactive users."""
    while True:
        current_time = time.time()
        inactive_users = []
        
        for user_id, data in list(user_data.items()):
            last_interaction_time = data.get("last_interaction", 0)
            
            if current_time - last_interaction_time > USER_DATA_LIFETIME:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            del user_data[user_id]
        
        time.sleep(3600) 

cleanup_thread = threading.Thread(target=clear_inactive_users, daemon=True)
cleanup_thread.start()

r = handle_redis_connection_error()

def cache_image_with_redis(image_url):
    """Cache images using Redis."""
    if r is None:
        return None  

    cached_image = r.get(image_url)
    
    if cached_image:
        return cached_image
    else:
        image_data = handle_image_caching_error(image_url)
        if image_data:
            r.setex(image_url, 3600, image_data) 
        return image_data


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """Send a welcome message with quiz information and options."""
    markup = InlineKeyboardMarkup()
    start_button = InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")
    guardianship = InlineKeyboardButton("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞", url="https://moscowzoo.ru/about/guardianship")

    markup.add(start_button)
    markup.add(guardianship)

    user_data[message.chat.id] = {"score": {}, "current_question": 0, "last_interaction": time.time()}
    bot.send_message(
        message.chat.id,
        """–ü—Ä–∏–≤–µ—Ç! 
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≥–¥–µ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è! üêæ
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –Ω–∞ —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ–µ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –∂–∏–≤–æ—Ç–Ω—ã—Ö. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. 
–ê –µ—â—ë ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –æ–ø–µ–∫—É–Ω–æ–º –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö! 
–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ —É–∑–Ω–∞–≤–∞–π, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∑–æ–æ–ø–∞—Ä–∫–µ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ. –ó–∞–¥–∞–π —Å–µ–±–µ –ø–∞—Ä—É –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ‚Äî –ì–¥–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∂–∏—Ç—å? ‚Äî –ö–∞–∫–∞—è –µ–¥–∞ —Ç–µ–±–µ –ø–æ –¥—É—à–µ? 
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É —Ç–æ—Ç–µ–º–Ω–æ–º—É –∂–∏–≤–æ—Ç–Ω–æ–º—É! """,
        reply_markup=markup
    )
    
    
@bot.callback_query_handler(func=lambda call: call.data == "start_quiz")
def start_quiz(call):
    """Initialize quiz for the user."""
    user_data[call.message.chat.id]["current_question"] = 0
    user_data[call.message.chat.id]["score"] = {}
    send_question(call.message.chat.id)


def send_question(chat_id):
    """Send the next quiz question or display the result if no questions remain."""
    current_question_index = user_data[chat_id]["current_question"]

    if current_question_index < len(QUESTIONS):
        question = QUESTIONS[current_question_index]
        text = question["text"]
        answers = question["answers"]
        image = question["img"]

        markup = InlineKeyboardMarkup()

        for i, answer in enumerate(answers):
            callback_data = f"answer:{current_question_index}:{i}" 
            markup.add(InlineKeyboardButton(answer["text"], callback_data=callback_data))
        
        bot.send_photo(chat_id, image, text, reply_markup=markup)
    
    else:
        send_result(chat_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def handle_answer(call):
    """Process user's answer and update score."""
    data = call.data.split(":")
    current_question_index = int(data[1])
    answer_index = int(data[2])

    answer = QUESTIONS[current_question_index]["answers"][answer_index]
    chat_id = call.message.chat.id

    for animal, points in answer["points"].items():
        user_data[chat_id]["score"][animal] = user_data[chat_id]["score"].get(animal, 0) + points

    user_data[chat_id]["current_question"] += 1
    send_question(chat_id)

def create_result_buttons():
    """Create inline keyboard for result message."""
    markup = InlineKeyboardMarkup()
    guardianship = InlineKeyboardButton("–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º", url="https://moscowzoo.ru/about/guardianship")
    restart_button = InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É?", callback_data="start_quiz")
    contact_support = InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data="contact_support")
    share_button = InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_menu")
    feedback_button = InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")

    markup.add(restart_button)
    markup.add(guardianship, share_button)
    markup.add(feedback_button, contact_support)
    
    
    return markup

def create_back_button():
    """Creates an inline keyboard markup with a single back button."""
    markup = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_result")
    markup.add(back_button)

    return markup

def send_result(chat_id):
    """Send the final quiz result to the user."""
    score = user_data[chat_id]["score"]
    animal = max(score, key=score.get) 
    result = RESULTS[animal]

    markup = create_result_buttons()

    text = f"{result['description']}\n\n[–£–∑–Ω–∞–π –±–æ–ª—å—à–µ...]({result['url']})"

    bot.send_photo(chat_id, result["image"], caption=text, reply_markup=markup, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == "contact_support")
def contact_support(call):
    """Handles the 'contact support' functionality for the bot."""
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    bot.register_next_step_handler_by_chat_id(chat_id, forward_to_admin)

def forward_to_admin(message):
    """Forwards a user's message to the admin along with the user's quiz results."""
    chat_id = message.chat.id
    user_question = message.text

    user_result = user_data.get(chat_id, {}).get("score", {})
    result_text = "\n".join([f"{animal}: {points}" for animal, points in user_result.items()])
    
    admin_message = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n\n"
    admin_message += f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n{result_text}\n\n"
    admin_message += f"üí¨ –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}"

    bot.send_message(ADMIN_ID, admin_message)

    markup = create_back_button()

    bot.send_message(chat_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "leave_feedback")
def ask_feedback(call):
    """Prompt the user to provide feedback and register the next step handler."""
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ:")
    bot.register_next_step_handler_by_chat_id(chat_id, forward_feedback_to_admin)


def forward_feedback_to_admin(message):
    """Forwards the user's feedback to the admin."""
    chat_id = message.chat.id
    feedback_text = message.text

    admin_message = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:\n\n{feedback_text}"
    bot.send_message(ADMIN_ID, admin_message)

    markup = create_back_button()

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. üòä", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "share_menu")
def share_menu(call):
    """Displays the share menu to the user."""
    chat_id = call.message.chat.id
    score = user_data[chat_id]["score"]
    animal = max(score, key=score.get) 
    
    result_text = f"üì¢ –Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–ª —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}! üêæ\n\n–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë: https://t.me/YourBotUsername"
    
    markup = InlineKeyboardMarkup()
    
    twitter = InlineKeyboardButton("üê¶ Twitter", url=f"https://twitter.com/intent/tweet?text={result_text}")
    vk = InlineKeyboardButton("üìò –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=f"https://vk.com/share.php?url=https://t.me/TotemAnimalQuizBot")
    facebook = InlineKeyboardButton("üìò Facebook", url=f"https://www.facebook.com/sharer/sharer.php?u=https://t.me/TotemAnimalQuizBot")
    telegram = InlineKeyboardButton("‚úàÔ∏è Telegram", switch_inline_query=result_text)
    back_button = InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_result")
    
    markup.add(twitter, vk)
    markup.add(facebook, telegram)
    markup.add(back_button)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_result")
def back_to_result(call):
    """Returns the user back to the result message."""
    chat_id = call.message.chat.id
    user_score = user_data.get(chat_id, {}).get("score", {})
    
    animal = max(user_score, key=user_score.get)
    result = RESULTS[animal]
    
    markup = create_result_buttons()

    if call.message.caption:
        markup = create_result_buttons()
        bot.edit_message_caption(
            chat_id=chat_id,
            message_id=call.message.message_id,
            caption=f"{result['description']}\n\n[–£–∑–Ω–∞–π –±–æ–ª—å—à–µ...]({result['url']})",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        markup = create_result_buttons()
        bot.send_photo(
            chat_id,
            result["image"],
            caption=f"{result['description']}\n\n[–£–∑–Ω–∞–π –±–æ–ª—å—à–µ...]({result['url']})",
            reply_markup=markup,
            parse_mode="Markdown"
        )


bot.polling(none_stop=True)