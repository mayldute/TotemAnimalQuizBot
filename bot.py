import telebot
from config import TOKEN, QUESTIONS, RESULTS
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot(TOKEN)

user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    start_button = InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")
    markup.add(start_button)

    user_data[message.chat.id] = {"score": {}, "current_question": 0}
    bot.send_message(
        message.chat.id,
        """–ü—Ä–∏–≤–µ—Ç! üëã
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≥–¥–µ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è! üêæ
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –Ω–∞ —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ–µ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –∂–∏–≤–æ—Ç–Ω—ã—Ö. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. ü¶ÅüêßüêØ
–ê –µ—â—ë ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –æ–ø–µ–∫—É–Ω–æ–º –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö! üíö
–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ —É–∑–Ω–∞–≤–∞–π, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∑–æ–æ–ø–∞—Ä–∫–µ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ. –ó–∞–¥–∞–π —Å–µ–±–µ –ø–∞—Ä—É –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ‚Äî –ì–¥–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∂–∏—Ç—å? ‚Äî –ö–∞–∫–∞—è –µ–¥–∞ —Ç–µ–±–µ –ø–æ –¥—É—à–µ? üçΩÔ∏è
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É —Ç–æ—Ç–µ–º–Ω–æ–º—É –∂–∏–≤–æ—Ç–Ω–æ–º—É! ü¶ì""",
        reply_markup=markup
    )
    
    
@bot.callback_query_handler(func=lambda call: call.data == "start_quiz")
def start_quiz(call):
    user_data[call.message.chat.id]["current_question"] = 0
    user_data[call.message.chat.id]["score"] = {}
    send_question(call.message.chat.id)


def send_question(chat_id):
    current_question_index = user_data[chat_id]["current_question"]

    if current_question_index < len(QUESTIONS):
        question = QUESTIONS[current_question_index]
        text = question["text"]
        answers = question["answers"]
        image = question["img"]

        markup = InlineKeyboardMarkup()

        for i, answer in enumerate(answers):
            callback_data = f"answer:{current_question_index}:{i}" 
            markup.add(InlineKeyboardButton(answer["text"], callback_data=callback_data))
        
        bot.send_photo(chat_id, image, text, reply_markup=markup)
    
    else:
        send_result(chat_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def handle_answer(call):
    data = call.data.split(":")
    current_question_index = int(data[1])
    answer_index = int(data[2])

    answer = QUESTIONS[current_question_index]["answers"][answer_index]
    chat_id = call.message.chat.id

    for animal, points in answer["points"].items():
        user_data[chat_id]["score"][animal] = user_data[chat_id]["score"].get(animal, 0) + points

    user_data[chat_id]["current_question"] += 1
    send_question(chat_id)


def send_result(chat_id):
    score = user_data[chat_id]["score"]
    animal = max(score, key=score.get) 
    result = RESULTS[animal]

    bot.send_photo(chat_id, result["image"], caption=f"{result['description']}")

bot.polling(none_stop=True)